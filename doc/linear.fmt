%if False
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% linear.fmt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%endif
%
%if not lhs2tex_lambda_fmt_read
%let lhs2tex_lambda_fmt_read = True
%include lhs2TeX.fmt
%
%if style /= newcode
%
%format %              = percent_ "\hspercent "
%format 1              = one_ "\hsone "
%format \              = lambda_ "\hslambda "
%format ->             = "\hsarrow{" `arrowfun_` "}{" `arrowlin_` "}{" lambdaperiod_ "}"
%format percent_       = "\%"
%format one_           = "1"
%format lambda_        = "\lambda "
%format `arrowfun_`    = "\rightarrow "
%format `arrowlin_`    = "\multimap "
%format lambdaperiod_  = "\mathpunct{.}"
%
\ReadOnlyOnce{linear.fmt}
\makeatletter


% The HaskellResetHook is a list to which things can
% be added that reset the Haskell state to the beginning.
% This is to recover from states where the hacked intelligence
% is not sufficient.

\let\HaskellResetHook\empty
\newcommand*{\AtHaskellReset}[1]{%
  \g@@addto@@macro\HaskellResetHook{#1}}
\newcommand*{\HaskellReset}{\HaskellResetHook}

\newcommand*\hsarrowfun[3]{#1}
\newcommand*\hsarrowlin[3]{#2\global\let\hsarrow=\hsarrowfun}
\newcommand*\hslambdaperiod[3]{#3\global\let\hsarrow=\hsarrowfun}
\newcommand\hspercent{\global\let\hsone=\hsoneafterpercent}
\newcommand*\hsoneafterpercent{%
  \global\let\hsone=1
  \global\let\hsarrow=\hsarrowlin}
\newcommand\hslambda{\global\let\hsarrow=\hslambdaperiod}

\AtHaskellReset{%
  \global\let\hsone=1
  \global\let\hsarrow=\hsarrowfun}

\HaskellReset

\makeatother
\EndFmtInput
%endif
%endif